/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package scanip;

import java.net.InetAddress;
import java.net.NetworkInterface;
import java.net.SocketException;
import java.net.UnknownHostException;
import java.util.Vector;
import javax.naming.Context;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author quyen
 */
public class MainForm extends javax.swing.JFrame {

    /**
     * Creates new form MainForm
     */
    
    private XuLy[] threads = null;
    private final static int SUBNET_MASK = 255;
    private final static String VERSION = "IPv4";
    private final static String HOST_NAME = "HOST NAME";
    private final static String ADDRESS = "IP ADDRESSS";
    private final static String TIMES = "TIMES";
    private InetAddress thisComputerIP = null;
    private final static int NUM_THREAD = 64;
    private int ipNA, ipBA, range;
    private DefaultTableModel mData = null;

    public MainForm() {
        initComponents();
        initialize();
        pack();
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lbTitle = new javax.swing.JLabel();
        lbMyIP = new javax.swing.JLabel();
        lbRangeIP = new javax.swing.JLabel();
        lbFrom = new javax.swing.JLabel();
        txtTo = new javax.swing.JTextField();
        lbTo = new javax.swing.JLabel();
        txtMyIP = new javax.swing.JTextField();
        lbScanning = new javax.swing.JLabel();
        txtFrom = new javax.swing.JTextField();
        txtIPScanning = new javax.swing.JTextField();
        scrollDisplay = new javax.swing.JScrollPane();
        tbDisplay = new javax.swing.JTable();
        btnStart = new javax.swing.JButton();
        btnReset = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lbTitle.setFont(new java.awt.Font("Ubuntu Mono", 1, 24)); // NOI18N
        lbTitle.setForeground(new java.awt.Color(204, 43, 43));
        lbTitle.setText("SCAN IP APPLICATION");

        lbMyIP.setFont(new java.awt.Font("Ubuntu Mono", 1, 18)); // NOI18N
        lbMyIP.setText("My IP Address (IPv4): ");

        lbRangeIP.setFont(new java.awt.Font("Ubuntu Mono", 1, 18)); // NOI18N
        lbRangeIP.setText("Range IP Address (IPv4) with same network");

        lbFrom.setText("From:");

        txtTo.setFont(new java.awt.Font("Ubuntu Mono", 1, 17)); // NOI18N
        txtTo.setEnabled(false);

        lbTo.setText("To:");

        txtMyIP.setFont(new java.awt.Font("Ubuntu Mono", 1, 17)); // NOI18N
        txtMyIP.setEnabled(false);

        lbScanning.setFont(new java.awt.Font("Ubuntu Mono", 1, 18)); // NOI18N
        lbScanning.setText("IP Address is scanning: ");

        txtFrom.setFont(new java.awt.Font("Ubuntu Mono", 1, 17)); // NOI18N
        txtFrom.setEnabled(false);

        txtIPScanning.setFont(new java.awt.Font("Ubuntu Mono", 1, 17)); // NOI18N
        txtIPScanning.setEnabled(false);

        tbDisplay.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        scrollDisplay.setViewportView(tbDisplay);

        btnStart.setFont(new java.awt.Font("Ubuntu Mono", 1, 18)); // NOI18N
        btnStart.setText("Start");
        btnStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartActionPerformed(evt);
            }
        });

        btnReset.setFont(new java.awt.Font("Ubuntu Mono", 1, 18)); // NOI18N
        btnReset.setText("Reset");
        btnReset.setEnabled(false);
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        btnExit.setFont(new java.awt.Font("Ubuntu Mono", 1, 18)); // NOI18N
        btnExit.setText("Exit");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(53, 53, 53)
                .addComponent(btnStart, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(51, 51, 51)
                .addComponent(btnReset, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(47, 47, 47)
                .addComponent(btnExit, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(70, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lbFrom)
                        .addGap(19, 19, 19)
                        .addComponent(txtFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lbTo)
                        .addGap(18, 18, 18)
                        .addComponent(txtTo))
                    .addComponent(scrollDisplay)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lbMyIP)
                                .addGap(14, 14, 14)
                                .addComponent(txtMyIP, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(lbScanning)
                            .addComponent(lbRangeIP))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lbTitle)
                .addGap(167, 167, 167))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(239, Short.MAX_VALUE)
                    .addComponent(txtIPScanning, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(122, 122, 122)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(lbTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbMyIP)
                    .addComponent(txtMyIP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lbRangeIP)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbFrom)
                    .addComponent(txtTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbTo)
                    .addComponent(txtFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addComponent(lbScanning)
                .addGap(18, 18, 18)
                .addComponent(scrollDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnStart)
                    .addComponent(btnReset)
                    .addComponent(btnExit))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(165, 165, 165)
                    .addComponent(txtIPScanning, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(296, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartActionPerformed
        // TODO add your handling code here:
        btnStart.setEnabled(false);
        btnReset.setEnabled(true);
        initialize();
        if (mData.getRowCount() > 0) {
            for (int i = mData.getRowCount() - 1; i >= 0; i--) {
                mData.removeRow(i);
            }
        }
        try {
            printReachableHosts();
        } catch (SocketException ex) {

        } 
        
    }//GEN-LAST:event_btnStartActionPerformed

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        // TODO add your handling code here:
        btnReset.setEnabled(false);
        txtIPScanning.setText("");
        if (mData.getRowCount() > 0) {
            for (int i = mData.getRowCount() - 1; i >= 0; i--) {
                mData.removeRow(i);
            }
        }
        btnStart.setEnabled(true);
    }//GEN-LAST:event_btnResetActionPerformed

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        // TODO add your handling code here:
        int value = JOptionPane.showConfirmDialog(null,
                "Do you want to exit?",
                "Message",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE);
        if (value == JOptionPane.YES_OPTION) {
            System.exit(0);
        }
    }//GEN-LAST:event_btnExitActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnReset;
    private javax.swing.JButton btnStart;
    private javax.swing.JLabel lbFrom;
    private javax.swing.JLabel lbMyIP;
    private javax.swing.JLabel lbRangeIP;
    private javax.swing.JLabel lbScanning;
    private javax.swing.JLabel lbTitle;
    private javax.swing.JLabel lbTo;
    private javax.swing.JScrollPane scrollDisplay;
    private javax.swing.JTable tbDisplay;
    private javax.swing.JTextField txtFrom;
    private javax.swing.JTextField txtIPScanning;
    private javax.swing.JTextField txtMyIP;
    private javax.swing.JTextField txtTo;
    // End of variables declaration//GEN-END:variables

    private void initialize() {
        //GetIP.init(this);
        Vector<String> headers = new Vector<>();
        headers.addElement(ADDRESS);
        headers.addElement(HOST_NAME);
        headers.add(TIMES);
        
        //set header to table
        Vector<String> data = new Vector<>();
        mData = new DefaultTableModel(headers, headers.size()) {
            @Override
            public boolean isCellEditable(int row, int column) {
                // disable edit
                return false;
            }
        };
        
        tbDisplay.setModel(mData);
        txtMyIP.setText("");
        
        try {
            
            thisComputerIP = IPUtils.getWLANipAddress(VERSION);
            NetworkInterface thisNetworkInterface = NetworkInterface.getByInetAddress(thisComputerIP);
            int mask = thisNetworkInterface.getInterfaceAddresses().get(1).getNetworkPrefixLength();

            System.out.println(mask);
            String subnetMask = getSubnetMask(mask);
                
            String[] ipAddress = thisComputerIP.getHostAddress().split("\\.");
            String[] masks = subnetMask.split("\\.");

            StringBuffer addressNetwork = new StringBuffer();
            StringBuffer broadcastNetwork = new StringBuffer();

            // calculate address network  and broadcast network
            for (int i = 0; i < 4; i++) {
                if (addressNetwork.length() > 0) {
                    addressNetwork.append(".");
                    broadcastNetwork.append(".");
                }
                addressNetwork.append(Integer.parseInt(ipAddress[i]) & Integer.parseInt(masks[i]));
                broadcastNetwork.append(Integer.parseInt(ipAddress[i]) | Integer.parseInt(masks[i]) ^ (SUBNET_MASK));
            }

            ipNA = IPUtils.ipToInt(addressNetwork.toString());
            ipBA = IPUtils.ipToInt(broadcastNetwork.toString());
            range = (Math.abs(ipBA - ipNA) + 1);

            if (thisComputerIP != null) {
                txtMyIP.setText(thisComputerIP.getHostAddress() + "/" + mask);
                setRange(ipNA+1, ipBA-1);
            } else {
                txtMyIP.setText("IPv4 Address not found. Is your internet down?");
            }
        } catch (SocketException ex) {
        }
    }
    
    private void setRange(int ipFirst, int ipDest) {
        txtFrom.setText(IPUtils.intToIp(ipFirst));
        txtTo.setText(IPUtils.intToIp(ipDest));
    }
    
    public void addData(Vector<String> data) {
        try {
            mData.addRow(data);
        } catch (ArrayIndexOutOfBoundsException e) {
        }
    }

    public void addScanning(String ip) {
        try {
            txtIPScanning.setText(ip);
        } catch (Exception ex) {
            
        }
    }
    
    public void printReachableHosts() throws SocketException {

        threads = new XuLy[NUM_THREAD];
        int firstIp = ipNA;
        int ipRange = range / NUM_THREAD;
        for (int i = 0; i < threads.length; i++) {
            threads[i] = new XuLy(firstIp, firstIp + ipRange - 1);
            threads[i].start();
            firstIp += ipRange;
        }
    }
    
    public String getSubnetMask(int mask) {
        String maskAddress = "";
        try {
            long bits = 0;
            bits = 0xffffffff ^ (1 << 32 - mask) - 1;
            // convert prefix to Decimal dot com form;
            maskAddress = String.format("%d.%d.%d.%d", (bits & 0x0000000000ff000000L) >> 24,
                    (bits & 0x0000000000ff0000) >> 16,
                    (bits & 0x0000000000ff00) >> 8, bits & 0xff);
        }catch (Exception ex) {
            
        }
        return maskAddress;
    }
    
    class XuLy extends Thread {

        private long startTime;
        private int ipStart, ipEnd;

        public XuLy(int ipStart, int ipEnd) {
         this.ipStart = ipStart;
         this.ipEnd = ipEnd;
        }

        @Override
        public void run() {
            int timeout = 5000;
            startTime = System.nanoTime();
            try {
                for (int i = ipStart ; i <= ipEnd ; i++){
                    String name = IPUtils.intToIp(i);
                    InetAddress ipAddress = InetAddress.getByName(name);
                    if (ipAddress.isReachable(timeout)) {
                        long endTime = System.nanoTime();
                        Vector<String> data = new Vector<>();
                        data.addElement(ipAddress.toString());
                        data.addElement(ipAddress.getHostName());
                        data.addElement(String.valueOf((double) (endTime - startTime) / (1000000000)));
                        addData(data);
                    }
                    addScanning(ipAddress.getHostAddress());
                }
            } catch (UnknownHostException e) {
                e.printStackTrace();
            } catch (Exception e1) {
                e1.printStackTrace();
            }

        }

    }
}
